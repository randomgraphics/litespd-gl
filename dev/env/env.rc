#!/bin/bash

# source the standard bash setup script
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
else
    echo "WARNING: ~/.bashrc not found"
fi

echo
echo "********************************************************************************"
echo "*                                                                              *"
echo "*                      Litespd GL Development Console                          *"
echo "*                                                                              *"
echo "********************************************************************************"
echo

export LITESPD_GL_ROOT="$(cd $(dirname "${BASH_SOURCE[0]}")/../..;pwd)"

# Check for WSL environment
if [[ $(echo $(uname -r)) == *"microsoft"* ]] ; then
    # kernel name contains string "microsoft". we must be in wsl environment.
    echo "NOTE: You are currently running WSL environment. Please refer to the following"
    echo "      link to ensure your docker environemnt is running properly:"
    echo
    echo "      https://docs.docker.com/docker-for-windows/wsl/"
    echo

    # remove /mnt/... like path imported via WSL interoperbility to avoid confusing linux tools, except docker related path
    # TODO: retain docker path in original PATH instead of appending with hardcoded one
    export PATH=`echo $PATH | tr ":" "\n" | grep -v "/mnt/" | tr "\n" ":"`:/mnt/c/Program\ Files/Docker/Docker/resources/bin:/mnt/c/ProgramData/DockerDesktop/version-bin
fi

# TODO: check package only works on
# # check required apt/dpkg packages
# function __check_package() {
#     printf "Check package $1 .... "
#     if dpkg -s $1 2>/dev/null 1>/dev/null; then
#         printf "OK\n"
#     else
#         printf "Missing. Please run 'dev/env/bootstrap.sh' to install required packages\n"
#     fi
# }
# __check_package git-lfs
# __check_package vulkan-sdk


# setup android sdk/ndk path
if [ -z "${JAVA_HOME}" ] || [ ! -d "${JAVA_HOME}" ]; then
    echo "WARNING: JAVA_HOME is not set or is pointing to non-exist folder. Android build will not work."
fi
if [ -z "${ANDROID_SDK_ROOT}" ] || [ ! -d "${ANDROID_SDK_ROOT}" ]; then
    echo "WARNING: ANDROID_SDK_ROOT is not set or is pointing to non-exist folder. Android build will not work."
else
    export PATH=${PATH}:${ANDROID_SDK_ROOT}/platform-tools
fi
if [ -z "${ANDROID_NDK_HOME}" ] || [ ! -d "${ANDROID_NDK_HOME}" ]; then
    echo "WARNING: ANDROID_NDK_HOME is not set or is pointing to non-exist folder. Android build will not work."
fi


# update PATH
export PATH=${PATH}:${LITESPD_GL_ROOT}/dev/bin

# setup bash autocomplete for common android commands: adb, fast-boot and etc.
if [ -f ${LITESPD_GL_ROOT}/dev/env/adb-autocomplete.sh ]; then
    . ${LITESPD_GL_ROOT}/dev/env/adb-autocomplete.sh
fi

# setup local git config (prefix with double underscore indicating it is private to this script)
__setup-local-git-config()
{
    # Make sure the target folder is git repository.
    if [ -d $1/.git ] || [ -f $1/.git ]; then
        cd $1
        git config --local include.path $GIT_CONFIG
        cd ->/dev/null
    else
        echo "WARNING: $1 is not a git repository."
    fi
}
# look for local gitconfig file first.
if [ -f ${LITESPD_GL_ROOT}/.gitconfig ]; then
    GIT_CONFIG=$(realpath ${LITESPD_GL_ROOT}/.gitconfig)
elif [ -f ${LITESPD_GL_ROOT}/../.gitconfig ]; then
    GIT_CONFIG=$(realpath ${LITESPD_GL_ROOT}/../.gitconfig)
fi
if test -v GIT_CONFIG; then
    printf "Config the repository with local git config file: $GIT_CONFIG .... "
    __setup-local-git-config ${LITESPD_GL_ROOT}
    printf "OK\n"
fi

# setup alias
dir="$(cd $(dirname "${BASH_SOURCE[0]}");pwd)"
if [ -f ${dir}/alias.bash.txt ]; then
    . ${dir}/alias.bash.txt
fi

# utility function to get git branch
get-git-branch() {
    branch=$(git rev-parse --abbrev-ref HEAD 2>&1)
    if [[ $? != 0 ]]  ; then
        branch="n/a"
    fi
    echo $branch
}

# Setup python virtual environment for Mac OS
VENV_ROOT=${LITESPD_GL_ROOT}/dev/env/pyvenv
if [ ! -d ${VENV_ROOT}/bin ]; then
    echo "Setting up python virtual environment for the first time..."
    python3 -m venv ${VENV_ROOT}
    source ${VENV_ROOT}/bin/activate
    python3 -m pip install --upgrade pip
    python3 -m pip install -r ${LITESPD_GL_ROOT}/dev/env/requirements.txt
else
    echo "Activating existing python virtual environment..."
    source ${VENV_ROOT}/bin/activate
fi

# setup command line prompt
PS1="\n\e[00;92m==== [litespd-gl] - \e[01;96m${LITESPD_GL_ROOT}\e[00;92m - \e[01;93m\$(get-git-branch)\e[00;92m ====\e[m\n$PS1"

# done
echo
echo "USERNAME         = $(whoami)"
echo "LITESPD_GL_ROOT  = ${LITESPD_GL_ROOT} "
echo "JAVA_HOME        = ${JAVA_HOME} (required to run Android build from command line)"
echo "ANDROID_SDK_ROOT = ${ANDROID_SDK_ROOT} (required to run Android build from command line)"
echo "ANDROID_NDK_HOME = ${ANDROID_NDK_HOME} (required to run Android build from command line)"
echo
echo "Happy coding!"
